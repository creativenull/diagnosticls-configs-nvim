INTRODUCTION                                       *diagnosticls-configs* *dls*

A collection of linters and formatters configured for diagnostic language
server to work with nvim-lsp.

SETUP                                              *diagnosticls-configs-setup*

The only thing this plugin provides is a wrapper to be passed to `nvim-lspconfig`
with the presets provided by this plugin. This way you can customize any other
config you've already setup for diagnostic-languageserver and extend them
however you like.

>lua
    local function on_attach(client)
      print('Attached to ' .. client.name)
    end

    local eslint = require('diagnosticls-configs.linters.eslint')
    local prettier = require('diagnosticls-configs.formatters.prettier')
    local dls_config = require('diagnosticls-configs').create({
      javascript = {
        linters = { eslint },
        formatters = { prettier },
      },
      typescript = {
        linters = { eslint },
        formatters = { prettier },
      },
    })

    require('lspconfig').diagnosticls.setup(vim.tbl_extend('force', dls_config, {
      -- Pass your custom lsp config below like on_attach and capabilities
      --
      -- on_attach = on_attach,
      -- capabilities = capabilities,
    }))
<

If you want linters and formatters for your language or if you just want linters
and not formatters during before creating the `lspconfig` setup, then you can
make use of `setup()` before calling `create()` to adjust those settings.

>lua
    require('diagnosticls-configs').setup({
      -- Use a list of default configurations
      -- set by this plugin
      -- (Default: false)
      defaults = false,

      -- Set to false if formatting is not needed at all,
      -- any formatter provided will be ignored
      -- (Default: true)
      format = true,
    })
<

DEFAULT CONFIGURATIONS                          *diagnosticls-configs-defaults*

We have a list of default configurations for some languages but this is an
opt-in feature. To enable it use `setup()` to include defaults before calling
`create()`. Check |diagnosticls-configs-supported| to see the provided defaults.

>lua
    require('diagnosticls-configs').setup({
        defaults = true
    })
    local dls_config = require('diagnosticls-configs').create()
<

You can also override the default by providing the same table as before.

>lua
    require('diagnosticls-configs').setup({
        defaults = true
    })
    local dls_config = require('diagnosticls-configs').create({
      -- override .js linter
      javascript = {
        linters = { require('diagnosticls-configs.linters.eslint') },
      },
    })
<

FORMATTERS SETUP                              *diagnosticls-configs-formatters*

If you do not want to include formatters and just want to use diagnostic-
languageserver for linting, then you can turn off via `setup()`.

>lua
    require('diagnosticls-configs').setup({
        defaults = true,
        format = false,
    })
    local dls_config = require('diagnosticls-configs').create()
<

ADVANCED CONFIGURATIONS                         *diagnosticls-configs-advanced*

If you want to extend a config, where it's required to conform to your project
or your preference, then make use of `vim.tbl_extend()` and provide your changes.
Consult the |diagnosticls-configs-docs| to see what options you can adjust for
a linter or a formatter.

>lua
    -- Example
    local prettier = require('diagnosticls-configs.formatters.prettier')
    prettier = vim.tbl_extend('force', prettier, {
        -- overrides
        sourceName = 'prettier_ext',
        args = { 'additional', 'args' },
    })
<

TROUBLESHOOTING                                   *diagnosticls-configs-issues*

If you get "no executable found" issues in `:checkhealth`, this means that the
linter or formatter was not found in the provided filepath. Ensure that it is
installed globally or in a valid filepath.

For nodejs/npm, php/composer, ruby/bundler: check if the linter/formatter
is installed in your node_modules (npm), vendor (composer/bundler) project
folder, or installed globally.

SUPPORTED LINTERS AND FORMATTERS               *diagnosticls-configs-supported*

https://github.com/creativenull/diagnosticls-configs-nvim#supported-linters-and-formatters

DIAGNOSTIC-LANGUAGESERVER DOCS                      *diagnosticls-configs-docs*

https://github.com/iamcco/diagnostic-languageserver#config--document

 vim:tw=78:ts=8:noet:ft=help:norl:
