INTRODUCTION                                       *diagnosticls-configs* *dls*

A collection of linters and formatters configured for diagnostic language
server to work with nvim-lsp.

SETUP                                              *diagnosticls-configs-setup*

The only thing this plugin provides is a wrapper to be passed to `nvim-lspconfig`
with the presets provided by this plugin. This way you can customize any other
config you've already setup for diagnostic-languageserver and extend them
however you like.

>lua
    local function on_attach(client)
      print('Attached to ' .. client.name)
    end

    local eslint = require('diagnosticls-configs.linters.eslint')
    local prettier = require('diagnosticls-configs.formatters.prettier')
    local dls_config = require('diagnosticls-configs').create({
      javascript = {
        linters = { eslint },
        formatters = { prettier },
      },
      typescript = {
        linters = { eslint },
        formatters = { prettier },
      },
    })

    require('lspconfig').diagnosticls.setup(vim.tbl_extend('force', dls_config, {
      -- Pass your custom lsp config below like on_attach and capabilities
      --
      -- on_attach = on_attach,
      -- capabilities = capabilities,
    }))
<

If you want to adjust `diagnosticls-configs` settings, you will need to call
`setup()` before you call `create()` in order to save your preference before
any linter/formatter could be provided.

Currently, there are only two options we provide:

- `defaults` - Provides you with a list of pre-configurations for all languages.
  Check |diagnosticls-configs-supported| for a list of supported languages that
  are pre-configured.
- `format` - Enable/disable formatters, if you only need to use linters.

>lua
    require('diagnosticls-configs').setup({
      -- Use a list of default configurations
      -- set by this plugin
      -- (Default: false)
      defaults = false,

      -- Set to false if formatting is not needed at all,
      -- any formatter provided will be ignored
      -- (Default: true)
      format = true,
    })

    -- Then call create()
    local dls_config = require('diagnosticls-configs').create()
<

DEFAULT CONFIGURATIONS                          *diagnosticls-configs-defaults*

As provided via `setup()`, you can enable a list of default configurations
(check |diagnosticls-configs-supported|).

>lua
    require('diagnosticls-configs').setup({ defaults = true })

    local dls_config = require('diagnosticls-configs').create()
<

You can also override the default by providing the same table as before.

>lua
    require('diagnosticls-configs').setup({ defaults = true })

    local dls_config = require('diagnosticls-configs').create({
      -- Override javascript linters
      javascript = {
        linters = { require('diagnosticls-configs.linters.eslint') },
      },
    })
<

FORMATTERS SETUP                              *diagnosticls-configs-formatters*

If you do not want to include formatters and just want to use diagnostic-
languageserver for linting, then you can turn off via `setup()`.

>lua
    require('diagnosticls-configs').setup({
        defaults = true,
        format = false,
    })

    local dls_config = require('diagnosticls-configs').create()
<

ADVANCED CONFIGURATIONS                         *diagnosticls-configs-advanced*

If you want to extend a config, where it's required to conform to your project
or your preference, then make use of `vim.tbl_extend()` and provide your changes.
Consult the |diagnosticls-configs-docs| to see what options you can adjust for
a linter or a formatter.

>lua
    -- Example
    local prettier = require('diagnosticls-configs.formatters.prettier')
    prettier = vim.tbl_extend('force', prettier, {
        -- overrides
        sourceName = 'prettier_ext',
        args = { 'additional', 'args' },
    })
<

TROUBLESHOOTING                                   *diagnosticls-configs-issues*

If you get "no executable found" issues in `:checkhealth`, this means that the
linter or formatter was not found in the provided filepath. Ensure that it is
installed globally or in a valid filepath.

For nodejs/npm, php/composer, ruby/bundler: check if the linter/formatter
is installed in your node_modules (npm), vendor (composer/bundler) project
folder, or installed globally.

SUPPORTED LINTERS AND FORMATTERS               *diagnosticls-configs-supported*

https://github.com/creativenull/diagnosticls-configs-nvim#supported-linters-and-formatters

DIAGNOSTIC-LANGUAGESERVER DOCS                      *diagnosticls-configs-docs*

https://github.com/iamcco/diagnostic-languageserver#config--document

 vim:tw=78:ts=8:noet:ft=help:norl:
